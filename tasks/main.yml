---
# tasks file for mongodb

- include: 'thp.yml'
  when: mongodb_disable_thp
  tags:
    - mongodb

- name: Install required packages
  apt:
    name: 'python-pip'
    state: 'installed'
    update_cache: 'yes'
  tags:
    - mongodb

- name: Install required pip package
  pip:
    name: 'pymongo'
    state: 'latest'
  tags:
    - mongodb

- include: 'percona_repo.yml'
  when: mongodb_use_percona
  tags:
    - mongodb

- include: 'mongodb_repo.yml'
  when: not mongodb_use_percona
  tags:
    - mongodb

- name: Prevent mongodb to start on install
  copy:
    content: |-
      #!/bin/sh
      exit 101
    dest: '/usr/sbin/policy-rc.d'
    owner: 'root'
    group: 'root'
    mode: '0755'
  changed_when: False
  tags:
    - mongodb

- name: Install the mongodb packages
  apt:
    name: '{{ mongodb_prefix }}{{ item }}'
    state: 'present'
    update_cache: 'yes'
  with_items: '{{ mongodb_packages }}'
  tags:
    - mongodb

- name: Remove policy-rc.d
  file:
    name: '/usr/sbin/policy-rc.d'
    state: 'absent'
  changed_when: False
  tags:
    - mongodb

- name: Configure mongodb server
  template:
    src: 'mongod.conf.j2'
    dest: '/etc/mongod.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: restart mongodb
  tags:
    - mongodb

- name: Check if pid file exists
  stat:
    path: '{{ mongodb_processmanagement_pidfilepath }}'
  register: mongodb_pid_file_stat
  changed_when: not mongodb_pid_file_stat.stat.exists
  tags:
    - mongodb

- name: Ensure {{ mongodb_user }} can create pid file
  file:
    state: 'touch'
    owner: '{{ mongodb_user }}'
    path: '{{ mongodb_processmanagement_pidfilepath }}'
  when: mongodb_pid_file_stat.changed
  tags:
    - mongodb

- name: Ensure {{ mongodb_net_ssl_pemkeyfile }} has right perms
  file:
    path: '{{ mongodb_net_ssl_pemkeyfile }}'
    owner: '{{ mongodb_user }}'
  when: mongodb_net_ssl_pemkeyfile is defined
  tags:
    - mongodb

- name: Ensure {{ mongodb_security_keyfile }} has right perms
  file:
    path: '{{ mongodb_security_keyfile }}'
    owner: '{{ mongodb_user }}'
  when: mongodb_security_keyfile is defined
  tags:
    - mongodb

- name: Ensure {{ mongodb_storage_dbpath }} has right perms
  file:
    path: '{{ mongodb_storage_dbpath }}'
    owner: '{{ mongodb_user }}'
  tags:
    - mongodb

- include: '{{ mongodb_init_system }}.yml'
  tags:
    - mongodb

- name: Wait for MongoDB to come up
  wait_for:
    port: '{{ mongodb_net_port }}'
    state: 'started'
    timeout: '{{ mongodb_wait_for_timeout }}'
  when: mongodb_wait_for
  tags:
    - mongodb

- name: Run mongoshell commands
  shell: >
    mongo --port {{ mongodb_net_port }} {{ item.key }} --eval "{{ item.value|join('\n') }}"
  with_dict: '{{ mongodb_shell }}'
  tags:
    - mongodb

- name: Check if admin user exists
  shell: >
    mongo --port {{ mongodb_net_port }} test -u {{ mongodb_admin_user }} -p'{{ mongodb_admin_pass }}' --authenticationDatabase admin --eval "db"
  register: mongodb_check_admin_user
  failed_when: mongodb_check_admin_user.rc > 1
  changed_when: mongodb_check_admin_user.rc == 1
  when: mongodb_create_admin_user
  tags:
    - mongodb

- name: Create admin user
  shell: >
    mongo --port {{ mongodb_net_port }} admin --eval "db.createUser({user:'{{ mongodb_admin_user }}',pwd:'{{ mongodb_admin_pass }}',roles:['root']})"
  when: mongodb_check_admin_user.changed
  tags:
    - mongodb

- name: Set mongodb users
  mongodb_user:
    login_database: 'admin'
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_pass }}'
    login_port: '{{ mongodb_net_port }}'
    name: '{{ item.name }}'
    database: '{{ item.database }}'
    password: '{{ item.password|default(omit) }}'
    roles: '{{ item.roles|default(omit) }}'
  with_items: '{{ mongodb_users }}'
  tags:
    - mongodb

- name: Rotate mongodb logs
  template:
    src: 'logrotate.j2'
    dest: '/etc/logrotate.d/mongodb'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: mongodb_enable_logrotate
  tags:
    - mongodb